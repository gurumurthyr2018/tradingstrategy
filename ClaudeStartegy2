# Trading Strategy combining RSI, MACD, and Market Forecast
# Version: 3.0
declare upper;

# Input parameters
input rsiLength = 14;
input rsiOverbought = 70;
input rsiOversold = 30;
input macdFastLength = 8;
input macdSlowLength = 17;
input macdSignalLength = 9;
input minHoldingPeriod = 5;

# RSI Calculation
def RSI = RSI(length = rsiLength);
def RSI_Above50 = RSI > 50;
def RSI_Below50 = RSI < 50;

# MACD Calculations
def fastEMA = ExpAverage(close, macdFastLength);
def slowEMA = ExpAverage(close, macdSlowLength);
def MACD = fastEMA - slowEMA;
def MACDSignal = ExpAverage(MACD, macdSignalLength);
def MACDCrossAbove = MACD > MACDSignal and MACD[1] <= MACDSignal[1];
def MACDCrossBelow = MACD < MACDSignal and MACD[1] >= MACDSignal[1];

# Market Forecast Far Line calculations
def MF = MarketForecast();
def MF_Far = MF{2};  # Using MF{2} for Far component
def MF_Far_Rising = MF_Far > MF_Far[1];
def MF_Far_Above50 = MF_Far > 50;
def MF_Far_Falling = MF_Far < MF_Far[1];
def MF_Far_Below50 = MF_Far < 50;

# Modified RSI Divergence Logic with Confirmation
def recentHigh2Days = Highest(high, 2);
def previousHigh15Days = Highest(high[2], 15);
def lowerHighs = recentHigh2Days < previousHigh15Days;

# Trend confirmation
def MovingAvg20 = ExpAverage(close, 20);
def MovingAvg50 = ExpAverage(close, 50);
def uptrend = MovingAvg20 > MovingAvg50;
def downtrend = MovingAvg20 < MovingAvg50;

# RSI Divergence with confirmation
def RSI_Diverging = lowerHighs and 
                    RSI > rsiOverbought and 
                    RSI < RSI[1] and
                    downtrend;

# Enhanced Position Tracking with Filters
def potentialBuySignal = MACDCrossAbove and 
                        RSI_Above50 and 
                        (MF_Far_Rising or MF_Far_Above50) and
                        uptrend;

def potentialSellSignal = (
    (RSI_Below50 and downtrend) or 
    (RSI_Diverging and MACDCrossBelow) or 
    (MF_Far_Falling and MF_Far_Below50)
);

# Position entry/exit counter
rec barsSinceEntry = if potentialBuySignal then 0
    else barsSinceEntry[1] + 1;

# Add minimum holding period check
def meetsHoldingPeriod = barsSinceEntry >= minHoldingPeriod;

# Track position state with improved filtering
rec inPosition = if potentialBuySignal and !inPosition[1] and uptrend then 1
    else if potentialSellSignal and inPosition[1] and meetsHoldingPeriod then 0
    else inPosition[1];

# Final Buy/Sell Signals with Additional Confirmation
def buySignal = potentialBuySignal and 
                !inPosition[1] and 
                uptrend;

def sellSignal = potentialSellSignal and 
                 inPosition[1] and 
                 meetsHoldingPeriod;

# Determine values at signal points
def currentRSI = if buySignal or sellSignal then RSI else Double.NaN;
def currentMACD = if buySignal or sellSignal then MACD else Double.NaN;
def currentMACDSignal = if buySignal or sellSignal then MACDSignal else Double.NaN;
def currentMF_Far = if buySignal or sellSignal then MF_Far else Double.NaN;
def currentMA20 = if buySignal or sellSignal then MovingAvg20 else Double.NaN;
def currentMA50 = if buySignal or sellSignal then MovingAvg50 else Double.NaN;

# Exit Trigger Identification
def exitTrigger = if !sellSignal then Double.NaN
    else if RSI_Below50 and downtrend then 1
    else if RSI_Diverging and MACDCrossBelow then 2
    else if MF_Far_Falling and MF_Far_Below50 then 3
    else 0;

def BarsHeld = if sellSignal then barsSinceEntry else Double.NaN;

# Plot Entry Signals
plot EntrySignal = if buySignal then low - (low * 0.001) else Double.NaN;
EntrySignal.SetPaintingStrategy(PaintingStrategy.ARROW_UP);
EntrySignal.SetDefaultColor(Color.GREEN);
EntrySignal.SetLineWeight(3);

# Plot Exit Signals
plot ExitSignal = if sellSignal then high + (high * 0.001) else Double.NaN;
ExitSignal.SetPaintingStrategy(PaintingStrategy.ARROW_DOWN);
ExitSignal.SetDefaultColor(Color.RED);
ExitSignal.SetLineWeight(3);

# Add detailed entry signal information
AddChartBubble(buySignal, 
               low - (low * 0.002),
               "ENTRY\nRSI: " + AsText(Round(currentRSI, 1)) + 
               "\nMACD: " + AsText(Round(currentMACD, 2)) + 
               "\nMF Far: " + AsText(Round(currentMF_Far, 1)) + 
               "\nMA20: " + AsText(Round(currentMA20, 2)) + 
               "\nMA50: " + AsText(Round(currentMA50, 2)),
               Color.GREEN);

# Add detailed exit signal information
AddChartBubble(sellSignal,
               high + (high * 0.002),
               "EXIT\nTrigger: " + AsText(exitTrigger) +
               "\nBars Held: " + AsText(Round(BarsHeld, 0)) +
               "\nRSI: " + AsText(Round(currentRSI, 1)) +
               "\nMACD: " + AsText(Round(currentMACD, 2)) +
               "\nMF Far: " + AsText(Round(currentMF_Far, 1)),
               Color.RED);

# Plot Moving Averages for visual confirmation
plot MA20 = MovingAvg20;
plot MA50 = MovingAvg50;
MA20.SetDefaultColor(Color.YELLOW);
MA50.SetDefaultColor(Color.BLUE);
