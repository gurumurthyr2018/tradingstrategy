# Trading Strategy with Entry Delay After Exit
# Version: 3.7
declare upper;
input tradeSize = 100;  # Number of shares/contracts per trade

# Original input parameters
input rsiLength = 14;
input rsiOverbought = 70;
input rsiOversold = 30;
input macdFastLength = 8;
input macdSlowLength = 17;
input macdSignalLength = 9;
input minHoldingPeriod = 5;
input daysAfterExit = 2;  # Minimum days to wait after exit before new entry

# RSI Calculation and Crossover
def RSI = RSI(length = rsiLength);
def RSI_Above50 = RSI > 50;
def RSI_CrossAbove50 = RSI > 50 and RSI[1] <= 50;  # RSI crosses above 50

# MACD Calculations
def fastEMA = ExpAverage(close, macdFastLength);
def slowEMA = ExpAverage(close, macdSlowLength);
def MACD = fastEMA - slowEMA;
def MACDSignal = ExpAverage(MACD, macdSignalLength);
def MACD_Above = MACD > MACDSignal;  # MACD is above signal
def MACD_CrossAbove = MACD > MACDSignal and MACD[1] <= MACDSignal[1];  # MACD crosses above signal

# Market Forecast Far Line calculations
def marketForecast = MarketForecast();
#def MF_Far =marketForecast[2];
def MF_Far = MarketForecast().intermediate;
def MF_Far_Above50 = MF_Far > 50;
def MF_Far_CrossAbove50 = MF_Far > 50 and MF_Far[1] <= 50;  # MF Far crosses above 50
def MF_Far_Falling = MF_Far < MF_Far[1];
def MF_Far_Below50 = MF_Far < 50;

# Trend confirmation
def MovingAvg20 = ExpAverage(close, 20);
def MovingAvg50 = ExpAverage(close, 50);
def uptrend = MovingAvg20 > MovingAvg50;
def downtrend = MovingAvg20 < MovingAvg50;

# Entry Scenarios
def scenario1_Entry = MACD_CrossAbove and    # MACD crosses above signal line
                     RSI_Above50 and         # RSI is above 50
                     MF_Far_Above50;         # Market Forecast Far is above 50

def scenario2_Entry = RSI_CrossAbove50 and   # RSI crosses above 50
                     MACD_Above and          # MACD is above signal line
                     MF_Far_Above50;         # Market Forecast Far is above 50

def scenario3_Entry = MF_Far_CrossAbove50 and # MF Far crosses above 50
                     RSI_Above50 and         # RSI is above 50
                     MACD > 0;               # MACD Fast line above slow line

# Exit conditions
def potentialSellSignal = 
    RSI < 50 or                              # RSI drops below 50
    MACD < MACDSignal or                     # MACD drops below signal
    (MF_Far_Falling and MF_Far_Below50) or   # Market Forecast Far falls below 50
    downtrend;                               # Moving average trend turns down

# Position tracking and signals
rec barsSinceEntry = if !IsNaN(close) then
    if (scenario1_Entry or scenario2_Entry or scenario3_Entry) and uptrend then 0
    else barsSinceEntry[1] + 1
else 0;

# Add minimum holding period check
def meetsHoldingPeriod = barsSinceEntry >= minHoldingPeriod;

# Track position state - Define inPosition and signals first
rec inPosition = if !IsNaN(close) then
    if (scenario1_Entry or scenario2_Entry or scenario3_Entry) and uptrend and !inPosition[1] then 1
    else if potentialSellSignal and inPosition[1] and meetsHoldingPeriod then 0
    else inPosition[1]
else 0;

def sellSignal = potentialSellSignal and inPosition[1] and meetsHoldingPeriod;

# Track days since last exit
rec daysSinceExit = if !IsNaN(close) then
    if sellSignal[1] then 1
    else if daysSinceExit[1] >= 0 then daysSinceExit[1] + 1
    else 0
else 0;

# Check if enough time has passed since last exit
def canEnter = daysSinceExit >= daysAfterExit or daysSinceExit == 0;

# Final buy signal with waiting period
def buySignal = (scenario1_Entry or scenario2_Entry or scenario3_Entry) and 
                uptrend and 
                !inPosition[1] and 
                canEnter;

# Debug plots to monitor conditions
plot Debug_Scenario1 = if scenario1_Entry then 1 else 0;
Debug_Scenario1.SetDefaultColor(Color.CYAN);
Debug_Scenario1.SetPaintingStrategy(PaintingStrategy.BOOLEAN_POINTS);

plot Debug_Scenario2 = if scenario2_Entry then 1 else 0;
Debug_Scenario2.SetDefaultColor(Color.YELLOW);
Debug_Scenario2.SetPaintingStrategy(PaintingStrategy.BOOLEAN_POINTS);

plot Debug_Scenario3 = if scenario3_Entry then 1 else 0;
Debug_Scenario3.SetDefaultColor(Color.MAGENTA);
Debug_Scenario3.SetPaintingStrategy(PaintingStrategy.BOOLEAN_POINTS);

# Order Placement Logic
AddOrder(OrderType.BUY_TO_OPEN, buySignal, tradeSize = tradeSize, name = "LONG_ENTRY", price = close);

AddOrder(OrderType.SELL_TO_CLOSE, sellSignal, tradeSize = tradeSize, name = "LONG_EXIT", price = close);

# Enhanced entry signal information with scenario and waiting period details
AddChartBubble(buySignal, 
               low - (low * 0.002),
               "ENTRY\n" +
               (if scenario1_Entry then "Scenario 1: MACD Cross\n"
                else if scenario2_Entry then "Scenario 2: RSI Cross\n"
                else "Scenario 3: MF Cross\n") +
               "RSI: " + AsText(Round(RSI, 1)) + 
               "\nMACD vs Signal: " + AsText(Round(MACD - MACDSignal, 3)) +
               "\nMF Far: " + AsText(Round(MF_Far, 1)) +
               "\nMF Far-0: " + AsText(Round(MF_Far[1], 1)) +
               "\nDays Since Exit: " + AsText(daysSinceExit) +
               "\nUptrend: " + AsText(uptrend),
               Color.GREEN);

# Enhanced exit signal information
AddChartBubble(sellSignal,
               high + (high * 0.002),
               "EXIT\n" +
               "RSI: " + AsText(Round(RSI, 1)) +
               "\nMACD vs Signal: " + AsText(Round(MACD - MACDSignal, 3)) +
               "\nMF Far: " + AsText(Round(MF_Far, 1)) +
               "\nBars Held: " + AsText(barsSinceEntry),
               Color.RED);

# Plot Entry/Exit Signals
plot EntrySignal = if buySignal then low - (low * 0.001) else Double.NaN;
EntrySignal.SetPaintingStrategy(PaintingStrategy.ARROW_UP);
EntrySignal.SetDefaultColor(Color.GREEN);
EntrySignal.SetLineWeight(3);

plot ExitSignal = if sellSignal then high + (high * 0.001) else Double.NaN;
ExitSignal.SetPaintingStrategy(PaintingStrategy.ARROW_DOWN);
ExitSignal.SetDefaultColor(Color.RED);
ExitSignal.SetLineWeight(3);

# Plot Moving Averages for visual confirmation
plot MA20 = MovingAvg20;
plot MA50 = MovingAvg50;
MA20.SetDefaultColor(Color.YELLOW);
MA50.SetDefaultColor(Color.BLUE);
