# Backtestable Trading Strategy
# Author: Claude
# Platform: thinkorswim
# Uses EMA and RSI Wilder's Method

# Input Parameters
input length_RSI = 14;
input length_MA_fast = 8;
input length_MA_slow = 17;
input RSI_overbought = 70;
input RSI_oversold = 30;
input shareSize = 100;  # Number of shares per trade
input lookback_period = 126; # Approximately 6 months of trading days

# Date restriction logic
def month = GetMonth();
def isRestrictedPeriod = month >= 8 and month <= 10;

# Calculate RSI using Wilder's method
def NetChgAvg = WildersAverage(close - close[1], length_RSI);
def TotChgAvg = WildersAverage(AbsValue(close - close[1]), length_RSI);
def RSI = 100 * (0.5 + 0.5 * (NetChgAvg / TotChgAvg));

# Calculate EMAs explicitly
def MA_fast = ExpAverage(close, length_MA_fast);
def MA_slow = ExpAverage(close, length_MA_slow);

# Calculate average price change over lookback period
def priceChange = close - close[1];
def avgPriceChange = Average(AbsValue(priceChange), lookback_period);
def currentPriceDrop = close[1] - close;

# Basic conditions without position checks
def isOverbought = RSI > RSI_overbought;
def isOversold = RSI < RSI_oversold;
def goldenCross = MA_fast > MA_slow;
def deathCross = MA_fast < MA_slow;

# Price drop exit condition
def largePriceDrop = currentPriceDrop > (2.75 * avgPriceChange);

# Entry and exit base conditions without position state
def baseEntryCondition = RSI > 50 and goldenCross and !isRestrictedPeriod;
def exitLongCondition = RSI < 50 or deathCross or largePriceDrop;

# Position state tracking
rec positionState = if positionState[1] == 0 and baseEntryCondition then 1
                    else if positionState[1] == 1 and exitLongCondition then 0
                    else positionState[1];

# Final entry/exit signals with confirmation of state change
def exitLong = exitLongCondition and positionState == 0 and positionState[1] == 1;

# Post-exit waiting period counter
rec daysAfterExit = if exitLong then 1
                    else if daysAfterExit[1] >= 1 and daysAfterExit[1] < 2 then daysAfterExit[1] + 1
                    else 0;

# Trade counter logic
rec tradeCount = if !tradeCount[1] then 0 
                 else if baseEntryCondition and daysAfterExit == 0 then tradeCount[1] + 1 
                 else tradeCount[1];

# Final entry condition with waiting period
def entryLongCondition = baseEntryCondition and daysAfterExit == 0;
def enterLong = entryLongCondition and positionState == 1 and positionState[1] == 0;

# Strategy Orders
AddOrder(OrderType.BUY_TO_OPEN, 
    enterLong, 
    tradeSize = shareSize,
    name = "LONG_ENTRY");
AddOrder(OrderType.SELL_TO_CLOSE,
    exitLong,
    tradeSize = shareSize,
    name = "LONG_EXIT");
